/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { V0037JobResources } from './v0037JobResources';

export class V0037JobResponseProperties {
    /**
    * Charge resources used by this job to specified account
    */
    'account'?: string;
    /**
    * time job is eligible for running
    */
    'accrueTime'?: number;
    /**
    * administrator\'s arbitrary comment
    */
    'adminComment'?: string;
    /**
    * job_id of a job array or 0 if N/A
    */
    'arrayJobId'?: string;
    /**
    * task_id of a job array
    */
    'arrayTaskId'?: string;
    /**
    * Maximum number of running array tasks
    */
    'arrayMaxTasks'?: string;
    /**
    * string expression of task IDs in this record
    */
    'arrayTaskString'?: string;
    /**
    * association id for job
    */
    'associationId'?: string;
    /**
    * features required for batch script\'s node
    */
    'batchFeatures'?: string;
    /**
    * if batch: queued job with script
    */
    'batchFlag'?: boolean;
    /**
    * name of host running batch script
    */
    'batchHost'?: string;
    /**
    * Job flags
    */
    'flags'?: Array<string>;
    /**
    * burst buffer specifications
    */
    'burstBuffer'?: string;
    /**
    * burst buffer state info
    */
    'burstBufferState'?: string;
    /**
    * name of cluster that the job is on
    */
    'cluster'?: string;
    /**
    * comma separated list of required cluster features
    */
    'clusterFeatures'?: string;
    /**
    * command to be executed
    */
    'command'?: string;
    /**
    * arbitrary comment
    */
    'comment'?: string;
    /**
    * job requires contiguous nodes
    */
    'contiguous'?: boolean;
    /**
    * specialized core count
    */
    'coreSpec'?: string;
    /**
    * specialized thread count
    */
    'threadSpec'?: string;
    /**
    * cores per socket required by job
    */
    'coresPerSocket'?: string;
    /**
    * billable TRES
    */
    'billableTres'?: string;
    /**
    * number of processors required for each task
    */
    'cpusPerTask'?: string;
    /**
    * Minimum cpu frequency
    */
    'cpuFrequencyMinimum'?: string;
    /**
    * Maximum cpu frequency
    */
    'cpuFrequencyMaximum'?: string;
    /**
    * cpu frequency governor
    */
    'cpuFrequencyGovernor'?: string;
    /**
    * semicolon delimited list of TRES=# values
    */
    'cpusPerTres'?: string;
    /**
    * job start deadline 
    */
    'deadline'?: string;
    /**
    * command to be executed
    */
    'delayBoot'?: string;
    /**
    * synchronize job execution with other jobs
    */
    'dependency'?: string;
    /**
    * highest exit code of all job steps
    */
    'derivedExitCode'?: string;
    /**
    * time job is eligible for running
    */
    'eligibleTime'?: number;
    /**
    * time of termination, actual or expected
    */
    'endTime'?: number;
    /**
    * comma separated list of excluded nodes
    */
    'excludedNodes'?: string;
    /**
    * exit code for job
    */
    'exitCode'?: number;
    /**
    * comma separated list of required features
    */
    'features'?: string;
    /**
    * Origin cluster\'s name
    */
    'federationOrigin'?: string;
    /**
    * string of active sibling names
    */
    'federationSiblingsActive'?: string;
    /**
    * string of viable sibling names
    */
    'federationSiblingsViable'?: string;
    /**
    * Job flags
    */
    'gresDetail'?: Array<string>;
    /**
    * group job submitted as
    */
    'groupId'?: string;
    /**
    * job ID
    */
    'jobId'?: string;
    'jobResources'?: V0037JobResources;
    /**
    * state of the job
    */
    'jobState'?: string;
    /**
    * last time job was evaluated for scheduling
    */
    'lastSchedEvaluation'?: string;
    /**
    * licenses required by the job
    */
    'licenses'?: string;
    /**
    * maximum number of cpus usable by job
    */
    'maxCpus'?: string;
    /**
    * maximum number of nodes usable by job
    */
    'maxNodes'?: string;
    /**
    * mcs_label if mcs plugin in use
    */
    'mcsLabel'?: string;
    /**
    * semicolon delimited list of TRES=# values
    */
    'memoryPerTres'?: string;
    /**
    * name of the job
    */
    'name'?: string;
    /**
    * list of nodes allocated to job
    */
    'nodes'?: string;
    /**
    * requested priority change
    */
    'nice'?: string;
    /**
    * number of tasks to invoke on each core
    */
    'tasksPerCore'?: string;
    /**
    * number of tasks to invoke on each socket
    */
    'tasksPerSocket'?: string;
    /**
    * number of tasks to invoke on each board
    */
    'tasksPerBoard'?: string;
    /**
    * minimum number of cpus required by job
    */
    'cpus'?: string;
    /**
    * minimum number of nodes required by job
    */
    'nodeCount'?: string;
    /**
    * requested task count
    */
    'tasks'?: string;
    /**
    * job ID of hetjob leader
    */
    'hetJobId'?: string;
    /**
    * job IDs for all components
    */
    'hetJobIdSet'?: string;
    /**
    * HetJob component offset from leader
    */
    'hetJobOffset'?: string;
    /**
    * name of assigned partition
    */
    'partition'?: string;
    /**
    * minimum real memory per node
    */
    'memoryPerNode'?: string;
    /**
    * minimum real memory per cpu
    */
    'memoryPerCpu'?: string;
    /**
    * minimum # CPUs per node
    */
    'minimumCpusPerNode'?: string;
    /**
    * minimum tmp disk per node
    */
    'minimumTmpDiskPerNode'?: string;
    /**
    * preemption signal time
    */
    'preemptTime'?: number;
    /**
    * time job ran prior to last suspend
    */
    'preSusTime'?: number;
    /**
    * relative priority of the job
    */
    'priority'?: string;
    /**
    * Job profiling requested
    */
    'profile'?: Array<string>;
    /**
    * Quality of Service
    */
    'qos'?: string;
    /**
    * node reboot requested before start
    */
    'reboot'?: boolean;
    /**
    * comma separated list of required nodes
    */
    'requiredNodes'?: string;
    /**
    * enable or disable job requeue option
    */
    'requeue'?: boolean;
    /**
    * time of latest size change
    */
    'resizeTime'?: number;
    /**
    * count of job restarts
    */
    'restartCnt'?: string;
    /**
    * reservation name
    */
    'resvName'?: string;
    /**
    * type and if job can share nodes with other jobs
    */
    'shared'?: string;
    /**
    * details requested
    */
    'showFlags'?: Array<string>;
    /**
    * sockets per board required by job
    */
    'socketsPerBoard'?: string;
    /**
    * sockets per node required by job
    */
    'socketsPerNode'?: string;
    /**
    * time execution begins, actual or expected
    */
    'startTime'?: number;
    /**
    * optional details for state_reason
    */
    'stateDescription'?: string;
    /**
    * reason job still pending or failed
    */
    'stateReason'?: string;
    /**
    * pathname of job\'s stderr file
    */
    'standardError'?: string;
    /**
    * pathname of job\'s stdin file
    */
    'standardInput'?: string;
    /**
    * pathname of job\'s stdout file
    */
    'standardOutput'?: string;
    /**
    * time of job submission
    */
    'submitTime'?: number;
    /**
    * time job last suspended or resumed
    */
    'suspendTime'?: number;
    /**
    * slurmctld\'s arbitrary comment
    */
    'systemComment'?: string;
    /**
    * maximum run time in minutes
    */
    'timeLimit'?: string;
    /**
    * minimum run time in minutes
    */
    'timeMinimum'?: string;
    /**
    * threads per core required by job
    */
    'threadsPerCore'?: string;
    /**
    * Task to TRES binding directives
    */
    'tresBind'?: string;
    /**
    * TRES frequency directives
    */
    'tresFreq'?: string;
    /**
    * semicolon delimited list of TRES=# values
    */
    'tresPerJob'?: string;
    /**
    * semicolon delimited list of TRES=# values
    */
    'tresPerNode'?: string;
    /**
    * semicolon delimited list of TRES=# values
    */
    'tresPerSocket'?: string;
    /**
    * semicolon delimited list of TRES=# values
    */
    'tresPerTask'?: string;
    /**
    * tres reqeusted in the job
    */
    'tresReqStr'?: string;
    /**
    * tres used in the job
    */
    'tresAllocStr'?: string;
    /**
    * user id the job runs as
    */
    'userId'?: string;
    /**
    * user the job runs as
    */
    'userName'?: string;
    /**
    * wckey for job
    */
    'wckey'?: string;
    /**
    * pathname of working directory
    */
    'currentWorkingDirectory'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "account",
            "baseName": "account",
            "type": "string"
        },
        {
            "name": "accrueTime",
            "baseName": "accrue_time",
            "type": "number"
        },
        {
            "name": "adminComment",
            "baseName": "admin_comment",
            "type": "string"
        },
        {
            "name": "arrayJobId",
            "baseName": "array_job_id",
            "type": "string"
        },
        {
            "name": "arrayTaskId",
            "baseName": "array_task_id",
            "type": "string"
        },
        {
            "name": "arrayMaxTasks",
            "baseName": "array_max_tasks",
            "type": "string"
        },
        {
            "name": "arrayTaskString",
            "baseName": "array_task_string",
            "type": "string"
        },
        {
            "name": "associationId",
            "baseName": "association_id",
            "type": "string"
        },
        {
            "name": "batchFeatures",
            "baseName": "batch_features",
            "type": "string"
        },
        {
            "name": "batchFlag",
            "baseName": "batch_flag",
            "type": "boolean"
        },
        {
            "name": "batchHost",
            "baseName": "batch_host",
            "type": "string"
        },
        {
            "name": "flags",
            "baseName": "flags",
            "type": "Array<string>"
        },
        {
            "name": "burstBuffer",
            "baseName": "burst_buffer",
            "type": "string"
        },
        {
            "name": "burstBufferState",
            "baseName": "burst_buffer_state",
            "type": "string"
        },
        {
            "name": "cluster",
            "baseName": "cluster",
            "type": "string"
        },
        {
            "name": "clusterFeatures",
            "baseName": "cluster_features",
            "type": "string"
        },
        {
            "name": "command",
            "baseName": "command",
            "type": "string"
        },
        {
            "name": "comment",
            "baseName": "comment",
            "type": "string"
        },
        {
            "name": "contiguous",
            "baseName": "contiguous",
            "type": "boolean"
        },
        {
            "name": "coreSpec",
            "baseName": "core_spec",
            "type": "string"
        },
        {
            "name": "threadSpec",
            "baseName": "thread_spec",
            "type": "string"
        },
        {
            "name": "coresPerSocket",
            "baseName": "cores_per_socket",
            "type": "string"
        },
        {
            "name": "billableTres",
            "baseName": "billable_tres",
            "type": "string"
        },
        {
            "name": "cpusPerTask",
            "baseName": "cpus_per_task",
            "type": "string"
        },
        {
            "name": "cpuFrequencyMinimum",
            "baseName": "cpu_frequency_minimum",
            "type": "string"
        },
        {
            "name": "cpuFrequencyMaximum",
            "baseName": "cpu_frequency_maximum",
            "type": "string"
        },
        {
            "name": "cpuFrequencyGovernor",
            "baseName": "cpu_frequency_governor",
            "type": "string"
        },
        {
            "name": "cpusPerTres",
            "baseName": "cpus_per_tres",
            "type": "string"
        },
        {
            "name": "deadline",
            "baseName": "deadline",
            "type": "string"
        },
        {
            "name": "delayBoot",
            "baseName": "delay_boot",
            "type": "string"
        },
        {
            "name": "dependency",
            "baseName": "dependency",
            "type": "string"
        },
        {
            "name": "derivedExitCode",
            "baseName": "derived_exit_code",
            "type": "string"
        },
        {
            "name": "eligibleTime",
            "baseName": "eligible_time",
            "type": "number"
        },
        {
            "name": "endTime",
            "baseName": "end_time",
            "type": "number"
        },
        {
            "name": "excludedNodes",
            "baseName": "excluded_nodes",
            "type": "string"
        },
        {
            "name": "exitCode",
            "baseName": "exit_code",
            "type": "number"
        },
        {
            "name": "features",
            "baseName": "features",
            "type": "string"
        },
        {
            "name": "federationOrigin",
            "baseName": "federation_origin",
            "type": "string"
        },
        {
            "name": "federationSiblingsActive",
            "baseName": "federation_siblings_active",
            "type": "string"
        },
        {
            "name": "federationSiblingsViable",
            "baseName": "federation_siblings_viable",
            "type": "string"
        },
        {
            "name": "gresDetail",
            "baseName": "gres_detail",
            "type": "Array<string>"
        },
        {
            "name": "groupId",
            "baseName": "group_id",
            "type": "string"
        },
        {
            "name": "jobId",
            "baseName": "job_id",
            "type": "string"
        },
        {
            "name": "jobResources",
            "baseName": "job_resources",
            "type": "V0037JobResources"
        },
        {
            "name": "jobState",
            "baseName": "job_state",
            "type": "string"
        },
        {
            "name": "lastSchedEvaluation",
            "baseName": "last_sched_evaluation",
            "type": "string"
        },
        {
            "name": "licenses",
            "baseName": "licenses",
            "type": "string"
        },
        {
            "name": "maxCpus",
            "baseName": "max_cpus",
            "type": "string"
        },
        {
            "name": "maxNodes",
            "baseName": "max_nodes",
            "type": "string"
        },
        {
            "name": "mcsLabel",
            "baseName": "mcs_label",
            "type": "string"
        },
        {
            "name": "memoryPerTres",
            "baseName": "memory_per_tres",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "nodes",
            "baseName": "nodes",
            "type": "string"
        },
        {
            "name": "nice",
            "baseName": "nice",
            "type": "string"
        },
        {
            "name": "tasksPerCore",
            "baseName": "tasks_per_core",
            "type": "string"
        },
        {
            "name": "tasksPerSocket",
            "baseName": "tasks_per_socket",
            "type": "string"
        },
        {
            "name": "tasksPerBoard",
            "baseName": "tasks_per_board",
            "type": "string"
        },
        {
            "name": "cpus",
            "baseName": "cpus",
            "type": "string"
        },
        {
            "name": "nodeCount",
            "baseName": "node_count",
            "type": "string"
        },
        {
            "name": "tasks",
            "baseName": "tasks",
            "type": "string"
        },
        {
            "name": "hetJobId",
            "baseName": "het_job_id",
            "type": "string"
        },
        {
            "name": "hetJobIdSet",
            "baseName": "het_job_id_set",
            "type": "string"
        },
        {
            "name": "hetJobOffset",
            "baseName": "het_job_offset",
            "type": "string"
        },
        {
            "name": "partition",
            "baseName": "partition",
            "type": "string"
        },
        {
            "name": "memoryPerNode",
            "baseName": "memory_per_node",
            "type": "string"
        },
        {
            "name": "memoryPerCpu",
            "baseName": "memory_per_cpu",
            "type": "string"
        },
        {
            "name": "minimumCpusPerNode",
            "baseName": "minimum_cpus_per_node",
            "type": "string"
        },
        {
            "name": "minimumTmpDiskPerNode",
            "baseName": "minimum_tmp_disk_per_node",
            "type": "string"
        },
        {
            "name": "preemptTime",
            "baseName": "preempt_time",
            "type": "number"
        },
        {
            "name": "preSusTime",
            "baseName": "pre_sus_time",
            "type": "number"
        },
        {
            "name": "priority",
            "baseName": "priority",
            "type": "string"
        },
        {
            "name": "profile",
            "baseName": "profile",
            "type": "Array<string>"
        },
        {
            "name": "qos",
            "baseName": "qos",
            "type": "string"
        },
        {
            "name": "reboot",
            "baseName": "reboot",
            "type": "boolean"
        },
        {
            "name": "requiredNodes",
            "baseName": "required_nodes",
            "type": "string"
        },
        {
            "name": "requeue",
            "baseName": "requeue",
            "type": "boolean"
        },
        {
            "name": "resizeTime",
            "baseName": "resize_time",
            "type": "number"
        },
        {
            "name": "restartCnt",
            "baseName": "restart_cnt",
            "type": "string"
        },
        {
            "name": "resvName",
            "baseName": "resv_name",
            "type": "string"
        },
        {
            "name": "shared",
            "baseName": "shared",
            "type": "string"
        },
        {
            "name": "showFlags",
            "baseName": "show_flags",
            "type": "Array<string>"
        },
        {
            "name": "socketsPerBoard",
            "baseName": "sockets_per_board",
            "type": "string"
        },
        {
            "name": "socketsPerNode",
            "baseName": "sockets_per_node",
            "type": "string"
        },
        {
            "name": "startTime",
            "baseName": "start_time",
            "type": "number"
        },
        {
            "name": "stateDescription",
            "baseName": "state_description",
            "type": "string"
        },
        {
            "name": "stateReason",
            "baseName": "state_reason",
            "type": "string"
        },
        {
            "name": "standardError",
            "baseName": "standard_error",
            "type": "string"
        },
        {
            "name": "standardInput",
            "baseName": "standard_input",
            "type": "string"
        },
        {
            "name": "standardOutput",
            "baseName": "standard_output",
            "type": "string"
        },
        {
            "name": "submitTime",
            "baseName": "submit_time",
            "type": "number"
        },
        {
            "name": "suspendTime",
            "baseName": "suspend_time",
            "type": "number"
        },
        {
            "name": "systemComment",
            "baseName": "system_comment",
            "type": "string"
        },
        {
            "name": "timeLimit",
            "baseName": "time_limit",
            "type": "string"
        },
        {
            "name": "timeMinimum",
            "baseName": "time_minimum",
            "type": "string"
        },
        {
            "name": "threadsPerCore",
            "baseName": "threads_per_core",
            "type": "string"
        },
        {
            "name": "tresBind",
            "baseName": "tres_bind",
            "type": "string"
        },
        {
            "name": "tresFreq",
            "baseName": "tres_freq",
            "type": "string"
        },
        {
            "name": "tresPerJob",
            "baseName": "tres_per_job",
            "type": "string"
        },
        {
            "name": "tresPerNode",
            "baseName": "tres_per_node",
            "type": "string"
        },
        {
            "name": "tresPerSocket",
            "baseName": "tres_per_socket",
            "type": "string"
        },
        {
            "name": "tresPerTask",
            "baseName": "tres_per_task",
            "type": "string"
        },
        {
            "name": "tresReqStr",
            "baseName": "tres_req_str",
            "type": "string"
        },
        {
            "name": "tresAllocStr",
            "baseName": "tres_alloc_str",
            "type": "string"
        },
        {
            "name": "userId",
            "baseName": "user_id",
            "type": "string"
        },
        {
            "name": "userName",
            "baseName": "user_name",
            "type": "string"
        },
        {
            "name": "wckey",
            "baseName": "wckey",
            "type": "string"
        },
        {
            "name": "currentWorkingDirectory",
            "baseName": "current_working_directory",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V0037JobResponseProperties.attributeTypeMap;
    }
}

